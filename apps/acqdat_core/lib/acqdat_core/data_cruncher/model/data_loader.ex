defmodule AcqdatCore.DataCruncher.Model.Dataloader do
  @moduledoc """
  Module exposes functions to deal with different type of data sources.

  Data Cruncher can deal with different types of data.
  The different types of data can be
  - Primary Data Sources
  - Secondary Data Sources from data generated by the data cruncher
  """
  import Ecto.Query
  import Ecto.Query.API
  alias AcqdatCore.Schema.EntityManagement.SensorsData

  def load(:pds, params) do
    %{sensor_id: sensor_id, param_uuid: param_uuid,
       date_from: date_from, date_to: date_to} = params

    subquery = from(
      data in SensorsData,
      where: data.sensor_id == ^sensor_id and data.inserted_timestamp >= ^date_from and
        data.inserted_timestamp <= ^date_to
    )

    query = from(
      data in subquery,
      cross_join: elem in fragment("jsonb_array_elements(?)", data.parameters),
      where: fragment("?->>'uuid'=?", elem, ^param_uuid),
      select: data
    )
  end

  def load(:sds, params) do

  end

end
